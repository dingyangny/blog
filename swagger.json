{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {

    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "blog-nginx:80",
  "basePath": "/",
  "tags": [
    {
      "name": "Blog Controller",
      "description": "Blog Controller"
    },
    {
      "name": "Comment Controller",
      "description": "Comment Controller"
    },
    {
      "name": "Topic Controller",
      "description": "Topic Controller"
    },
    {
      "name": "user-controller",
      "description": "User Controller"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "paths": {
    "/blog": {
      "get": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "get all blogs or blogs of a user",
        "operationId": "getAllBlogsUsingGET",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "the id of the user whose blogs to retrieve, optional",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«List«Blog»»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "create a new blog",
        "operationId": "createBlogUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "blog",
            "description": "the body of the blog creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlogCreateReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Blog»"
            }
          }
        }
      }
    },
    "/blog/{blogId}/comment": {
      "get": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "get all comments of a blog",
        "operationId": "getAllCommentsUsingGET",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "the id of the blog who owns the comments",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«List«Comment»»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "create a new comment",
        "operationId": "createCommentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "the id of the blog who owns the comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "the body of the comment creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentCreateReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Comment»"
            }
          }
        }
      }
    },
    "/blog/{blogId}/comment/{id}": {
      "get": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "get a comment by id",
        "operationId": "getCommentByIdUsingGET",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "the id of the blog who owns the comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Comment»"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "update a comment",
        "operationId": "updateCommentUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "the id of the blog who owns the updating comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "the body of the comment update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentUpdateReqBody"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the comment to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Comment»"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Comment Controller"
        ],
        "summary": "delete a comment",
        "operationId": "deleteCommentUsingDELETE",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "the id of the blog who owns the deleting comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the comment to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "the id of the user requesting the deletion",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Void»"
            }
          }
        }
      }
    },
    "/blog/{id}": {
      "get": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "get a blog by id",
        "operationId": "getBlogByIdUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the blog to retrieve",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Blog»"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "update a blog",
        "operationId": "updateBlogUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "blog",
            "description": "the body of the blog update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlogUpdateReqBody"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the blog to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Blog»"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Blog Controller"
        ],
        "summary": "delete a blog",
        "operationId": "deleteBlogUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the blog to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "the id of the user requesting the deletion",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Void»"
            }
          }
        }
      }
    },
    "/topic": {
      "get": {
        "tags": [
          "Topic Controller"
        ],
        "summary": "Get all topics",
        "operationId": "getAllTopicsUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«List«Topic»»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Topic Controller"
        ],
        "summary": "Create a new topic",
        "operationId": "createTopicUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "topic",
            "description": "The body of the topic creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TopicCreateReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Topic»"
            }
          }
        }
      }
    },
    "/topic/{id}": {
      "get": {
        "tags": [
          "Topic Controller"
        ],
        "summary": "Get a topic by ID",
        "operationId": "getTopicByIdUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the topic",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Topic»"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Topic Controller"
        ],
        "summary": "Delete a topic by ID",
        "operationId": "deleteTopicUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the topic to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Void»"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "get all the users",
        "operationId": "getAllUsersUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«List«User»»"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "create a new user",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pwd",
            "in": "query",
            "description": "the user's password",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "description": "the user's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«User»"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "get a user by id",
        "operationId": "getUserByIdUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«User»"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-controller"
        ],
        "summary": "update a user",
        "operationId": "updateUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to be updating",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "user",
            "description": "the body of the updaing user request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateReqBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«User»"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-controller"
        ],
        "summary": "delete a user",
        "operationId": "deleteUserUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to be deleting",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Void»"
            }
          }
        }
      }
    },
    "/user/{id}/like": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "like a blog or a comment",
        "operationId": "likeContentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user who is liking a blog or a comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "targetId",
            "in": "query",
            "description": "the id of the target to be liked",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "the type of the target to be liked, it can be blog or comment",
            "required": true,
            "type": "string",
            "enum": [
              "blog",
              "comment"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result«Void»"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Blog": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "the content of the blog"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the blog"
        },
        "likes": {
          "type": "integer",
          "format": "int32",
          "description": "the number of likes for the blog"
        },
        "topics": {
          "type": "string",
          "description": "the topics associated with the blog. it's a string of topic names separated by commas"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user who created the blog"
        }
      },
      "title": "Blog",
      "description": "the entity of blog"
    },
    "BlogCreateReqBody": {
      "type": "object",
      "required": [
        "content",
        "userId"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "the content of the blog to be created"
        },
        "topics": {
          "type": "string",
          "description": "the topics related to the blog, it's a string separated by ','"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user who is creating a blog"
        }
      },
      "title": "BlogCreateReqBody",
      "description": "the body of blog create request"
    },
    "BlogUpdateReqBody": {
      "type": "object",
      "required": [
        "content",
        "userId"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "the content of the blog to be updated"
        },
        "topics": {
          "type": "string",
          "description": "the topics related to the blog, it's a string separated by ','"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user who is updating the blod"
        }
      },
      "title": "BlogUpdateReqBody",
      "description": "the body of blog update request"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the blog that the comment belongs to"
        },
        "content": {
          "type": "string",
          "description": "the content of the comment"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the comment"
        },
        "likes": {
          "type": "integer",
          "format": "int32",
          "description": "the number of likes for the comment"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user who made the comment"
        }
      },
      "title": "Comment",
      "description": "the entity of comment"
    },
    "CommentCreateReqBody": {
      "type": "object",
      "required": [
        "content",
        "userId"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "the content of the comment to be created"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user who is creating a comment"
        }
      },
      "title": "CommentCreateReqBody",
      "description": "the body of comment create request"
    },
    "CommentUpdateReqBody": {
      "type": "object",
      "required": [
        "content",
        "userId"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "the new content of the comment to be updated"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user who is updaing the comment"
        }
      },
      "title": "CommentUpdateReqBody",
      "description": "the body of comment update request"
    },
    "Result«Blog»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "$ref": "#/definitions/Blog"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«Blog»"
    },
    "Result«Comment»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "$ref": "#/definitions/Comment"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«Comment»"
    },
    "Result«List«Blog»»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Blog"
          }
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«List«Blog»»"
    },
    "Result«List«Comment»»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«List«Comment»»"
    },
    "Result«List«Topic»»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topic"
          }
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«List«Topic»»"
    },
    "Result«List«User»»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«List«User»»"
    },
    "Result«Topic»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "$ref": "#/definitions/Topic"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«Topic»"
    },
    "Result«User»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "$ref": "#/definitions/User"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«User»"
    },
    "Result«Void»": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "Result«Void»"
    },
    "Topic": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "the description of the topic"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the topic"
        },
        "name": {
          "type": "string",
          "description": "the name of the topic, unique and no more than 10 characters"
        }
      },
      "title": "Topic",
      "description": "the entity of topic"
    },
    "TopicCreateReqBody": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "the description of the topic to be created"
        },
        "name": {
          "type": "string",
          "description": "the name of the topic to be created"
        }
      },
      "title": "TopicCreateReqBody",
      "description": "the body of topic create request"
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "the id of the user"
        },
        "password": {
          "type": "string",
          "description": "the password of the user"
        },
        "username": {
          "type": "string",
          "description": "the name of the user, unique"
        }
      },
      "title": "User",
      "description": "the entity of user"
    },
    "UserUpdateReqBody": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "the new password of the user to be updated"
        },
        "username": {
          "type": "string",
          "description": "the new name of the user to be updated"
        }
      },
      "title": "UserUpdateReqBody",
      "description": "the body of user update request"
    }
  }
}